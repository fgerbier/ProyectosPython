# -*- coding: utf-8 -*-
"""ProyectoGerbier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FzOlGldaJDFBW8CrKCXbLa4whyyNa2Gk

# [GitHub Covid -19](https://github.com/CSSEGISandData/COVID-19)
"""

import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import numpy as np

#1
def procesar_anio(anio):
    # Crear una lista para almacenar los DataFrames
    dataframes = []


    fecha_inicio = datetime(anio, 1, 1)
    fecha_fin = datetime(anio, 12, 31)
    delta = timedelta(days=1)

    while fecha_inicio <= fecha_fin:

        fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'

        try:

            df = pd.read_csv(url)
            dataframes.append(df)
            print(f'DataFrame para {fecha_formateada} cargado exitosamente.')
        except Exception as e:
            print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')


        fecha_inicio += delta


    if dataframes:
        df_completo = pd.concat(dataframes, ignore_index=True)
        return df_completo
    else:
        print("No se cargaron datos.")
        return None

# Solicitar el año al usuario
anio_usuario = int(input("Ingresa el año que deseas procesar (por ejemplo, 2021): "))
df_anio = procesar_anio(anio_usuario)

# Mostrar las primeras filas del DataFrame completo
df_anio.head(5)

#2
info = df_anio.info()
info
estadisticas = df_anio.describe()
estadisticas

#3

faltantes = df_anio.isnull().sum()
proporciones = (faltantes / len(df_anio)) * 100
faltantes_df = pd.DataFrame({'Faltantes': faltantes, 'Proporción (%)': proporciones})
faltantes_df = faltantes_df[faltantes_df['Faltantes'] > 0]
print(faltantes_df)

def eliminar_nan(df, axis=0, inplace=False):

    # Eliminar NaN
    df_limpio = df.dropna(axis=axis, inplace=inplace)

    if not inplace:
        return df_limpio

df_anio_limpio = eliminar_nan(df_anio, axis=0, inplace=False)
df_anio_limpio

#4. Casos confirmados, fallecidos, recuperados y activos por país/región del año 2021

def casos_por_pais(df):
    datframes = []
    fecha_inicio = datetime(2021, 1, 1)
    fecha_fin = datetime(2021, 12, 31)
    delta = timedelta(days=1)

    while fecha_inicio <= fecha_fin:
        fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
        url =  f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            datframes.append(df)
            print(f'DataFrame para {fecha_formateada} cargado exitosamente.')
        except Exception as e:
            print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')
        fecha_inicio += delta


    if datframes:
        df_completo = pd.concat(datframes, ignore_index=True)
        return df_completo
    else:
        print("No se cargaron datos.")
        return None
def casos_por_pais(df):

    df[['Confirmed', 'Deaths', 'Recovered', 'Active']] = df[['Confirmed', 'Deaths', 'Recovered', 'Active']].fillna(0)
    df=df.drop_duplicates(subset=['Country_Region','Province_State'])
    df = df[['Country_Region', 'Confirmed', 'Deaths', 'Recovered', 'Active']]
    if 'Active' not in df.columns:
        df['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']
    casos_por_pais = df.groupby('Country_Region').agg({
        'Confirmed': 'sum',
        'Deaths': 'sum',
        'Recovered': 'sum',
        'Active': 'sum'
    }).reset_index()

    return casos_por_pais


#obtener resumen de casos por pais/region
if df_anio is not None:
    resumen_casos = casos_por_pais(df_anio)
else:
    print('No se han podido generar el resumen de los casos.')

resumen_casos
#df_argentina= resumen_casos[resumen_casos['Country_Region']=='Argentina']
#df_argentina

#5. Casos por país y provincia/estado: Desglose los casos confirmados, fallecidos y recuperados por país/región y por provincia/estado de finales del año en que comenzó la pandemia.

#funcion para procesar dia en especifico
def procesar_dia(fecha):
  fecha_formateada = fecha.strftime('%m-%d-%Y')
  url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
  try:
    df = pd.read_csv(url)
    return df
  except Exception as e:
    print(f'Error al procesar el archivo CSV: {e}')
    return None

fecha_2020 = datetime(2020, 12,31)
df_procesar_fecha = procesar_dia(fecha_2020)

def casos_por_pais_provincia(df):
  df[['Confirmed', 'Deaths', 'Recovered', 'Active']] = df[['Confirmed', 'Deaths', 'Recovered', 'Active']].fillna(0)

  #se seleccionan las columnas de interes: casos confirmados, fallecidos y recuperados
  df = df[['Country_Region', 'Province_State', 'Confirmed', 'Deaths', 'Recovered']]

  #agrupar desglose
  casos_desglose = df.groupby(['Country_Region', 'Province_State']).agg({
      'Confirmed': 'sum',
      'Deaths': 'sum',
      'Recovered': 'sum'
  }).reset_index()

  return casos_desglose


if df_procesar_fecha is not None:
    desglose_casos_pais_provincia = casos_por_pais_provincia(df_procesar_fecha)
    pd.set_option('display.max_rows', None)
else:
    print('No se han podido generar el resumen de los casos.')

desglose_casos_pais_provincia

#6. Casos en China: Proporcione el número de casos confirmados, fallecidos y recuperados en las provincias/estados de China en los meses número 6 de cada año.

def procesar_junio_china(anio):
  dataframes=[]
  fecha_inicio = datetime(anio, 6, 1)
  fecha_fin = datetime(anio, 6, 30)
  delta = timedelta(days=1)

  while fecha_inicio <= fecha_fin:
    fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
    url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
    try:
      df = pd.read_csv(url)
      columnas = {'Country_Region', 'Confirmed', 'Deaths', 'Recovered'}
      if columnas.issubset(df.columns):
        #realizar un filtro para china
        df_china = df[df['Country_Region'] == 'China'].copy()
        df_china.loc[:,['Confirmed', 'Deaths', 'Recovered']] = df_china[['Confirmed', 'Deaths', 'Recovered']].fillna(0)
        dataframes.append(df_china)
        print(f'DataFrame para {fecha_formateada} cargado exitosamente.')
      else:
        print(f'El DataFrame para {fecha_formateada} no contiene las columnas necesarias.')

    except Exception as e:
      print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')

    fecha_inicio += delta

  if dataframes:
    df_junio_china = pd.concat(dataframes, ignore_index=True)

    # agrupando
    if 'Province_State' in df_junio_china.columns:
       resumen_junio_china = df_junio_china.groupby('Province_State').agg({
          'Confirmed': 'sum',
          'Deaths': 'sum',
          'Recovered': 'sum'
      }).reset_index()
    else:
      resumen_junio_china = df_junio_china.groupby('Country_Region').agg({
          'Confirmed': 'sum',
          'Deaths': 'sum',
          'Recovered': 'sum'
      }).reset_index()

    return resumen_junio_china
  else:
    print("No se cargaron datos.")
    return None

anio_usuario = int(input("Ingresa el año que deseas procesar): "))
resumen_junio_china = procesar_junio_china(anio_usuario)

if resumen_junio_china is not None:
    print(resumen_junio_china)
else:
    print('No se han podido generar el resumen de los casos.')

#7. Casos en USA: Realice un desglose similar para las provincias/estados de USA (igual que el ítem anterior).
def procesar_junio_usa(anio):
  dataframes=[]
  fecha_inicio = datetime(anio, 6, 1)
  fecha_fin = datetime(anio, 6, 30)
  delta = timedelta(days=1)

  while fecha_inicio <= fecha_fin:
    fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
    url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/{fecha_formateada}.csv'
    try:
      df = pd.read_csv(url)
      columnas = {'Country_Region', 'Confirmed', 'Deaths', 'Recovered'}
      if columnas.issubset(df.columns):
        #realizar un filtro para china
        df_usa = df[df['Country_Region'] == 'US'].copy()
        df_usa = df_usa[['Country_Region', 'Province_State', 'Confirmed', 'Deaths', 'Recovered']]
        dataframes.append(df_usa)
        print(f'DataFrame para {fecha_formateada} cargado exitosamente.')
      else:
        print(f'El DataFrame para {fecha_formateada} no contiene las columnas necesarias.')

    except Exception as e:
      print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')

    fecha_inicio += delta

  if dataframes:
    df_junio_usa = pd.concat(dataframes, ignore_index=True)

    # agrupando
    if 'Province_State' in df_junio_usa.columns:
       resumen_junio_usa = df_junio_usa.groupby('Province_State').agg({
          'Confirmed': 'sum',
          'Deaths': 'sum',
          'Recovered': 'sum'
      }).reset_index()
    else:
      resumen_junio_usa = df_junio_usa.groupby('Country_Region').agg({
          'Confirmed': 'sum',
          'Deaths': 'sum',
          'Recovered': 'sum'
      }).reset_index()

    return resumen_junio_usa
  else:
    print("No se cargaron datos.")
    return None

anio_usuario = int(input("Ingresa el año que deseas procesar: "))
resumen_junio_usa = procesar_junio_usa(anio_usuario)

if resumen_junio_usa is not None:
    print(resumen_junio_usa)
else:
    print('No se han podido generar el resumen de los casos.')

#8. Países sin casos recuperados: Liste los países que no reportan casos de recuperación en el año 2022.

def procesar_sin_recuperados(anio):
    dataframes = []
    fecha_inicio = datetime(anio, 1, 1)
    fecha_fin = datetime(anio, 12, 31)
    delta = timedelta(days=1)

    while fecha_inicio <= fecha_fin:
        fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            columnas={'Country_Region', 'Confirmed', 'Deaths', 'Recovered'}
            if columnas.issubset(df.columns):
              df.loc[:,['Confirmed', 'Deaths', 'Recovered']] = df[['Confirmed', 'Deaths', 'Recovered']].fillna(0)
              dataframes.append(df)
              print(f'DataFrame para {fecha_formateada} cargado exitosamente.')
            else:
              print(f'El DataFrame para {fecha_formateada} no contiene las columnas necesarias.')
        except Exception as e:
            print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')
        fecha_inicio += delta
    if dataframes:
      df_anio = pd.concat(dataframes, ignore_index=True)
      df_anio = df_anio.groupby('Country_Region').agg({
          'Confirmed':sum,
          'Deaths':sum,
          'Recovered':sum
      }).reset_index()
      df_sin_recuperados = df_anio[df_anio['Recovered']==0]['Country_Region'].tolist()
      return df_sin_recuperados
    else:
      print("No se cargaron datos.")
      return None

anio = 2022
paises_sin_recuperados = procesar_sin_recuperados(anio)

if paises_sin_recuperados is not None:
    print(f'Paises sin recuperados en el año {anio} ({len(paises_sin_recuperados)} en total):')
    for pais in paises_sin_recuperados[:10]:
        print(pais)
    if len(paises_sin_recuperados) > 10:
        print('...')
else:
    print('No se han podido generar los países sin recuperados.')

#9. Fallecidos por país: Proporcione el número de fallecidos por país en el año 2021
def procesar_fallecidos_pais(anio):
    dataframes = []
    fecha_inicio = datetime(anio, 1, 1)
    fecha_fin = datetime(anio, 12, 31)
    delta = timedelta(days=1)
    while fecha_inicio <= fecha_fin:
        fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            columnas={'Country_Region', 'Confirmed', 'Deaths', 'Recovered'}
            if columnas.issubset(df.columns):
              df['Deaths'] = df['Deaths'].fillna(0)
              dataframes.append(df[['Country_Region', 'Deaths']])
            else:
              print(f'El DataFrame para {fecha_formateada} no contiene las columnas necesarias.')
        except Exception as e:
            print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')
        fecha_inicio += delta

        if dataframes:
          df_anio = pd.concat(dataframes, ignore_index=True)
          df_fallecidos = df_anio.groupby('Country_Region').agg({'Deaths': 'sum'}).reset_index()

          fallecidos_por_pais = df_fallecidos.set_index('Country_Region')['Deaths'].to_dict()
          return fallecidos_por_pais
        else:
          print("No se cargaron datos.")
          return None

anio = 2021
fallecidos_por_pais = procesar_fallecidos_pais(anio)

if fallecidos_por_pais is not None:
    print(f'Fallecidos por país en el año {anio}:')
    for pais, fallecidos in list(fallecidos_por_pais.items()):
        print(f'{pais}: {fallecidos}')

else:
    print('No se han podido generar los fallecidos por país.')

#10. Recuperados por país: Proporcione el número de recuperados por país en el año 2021.
def procesar_recuperados_pais(anio):
    dataframes = []
    fecha_inicio = datetime(anio, 1, 1)
    fecha_fin = datetime(anio, 12, 31)
    delta = timedelta(days=1)

    while fecha_inicio <= fecha_fin:
        fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)

            if {'Country_Region', 'Confirmed', 'Deaths', 'Recovered'}.issubset(df.columns):
                df['Recovered'] = df['Recovered'].fillna(0)
                df['Fecha'] = pd.to_datetime(fecha_formateada, format='%m-%d-%Y')
                dataframes.append(df[['Country_Region', 'Recovered', 'Fecha']])
            else:
                print(f'El DataFrame para {fecha_formateada} no contiene las columnas necesarias.')
        except Exception as e:
            print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')

        fecha_inicio += delta

    if dataframes:
        df_anio = pd.concat(dataframes, ignore_index=True)

        df_anio.sort_values(by=['Country_Region','Fecha'], inplace=True)
        df_anio['Recuperados_Nuevos'] = df_anio.groupby('Country_Region')['Recovered'].diff().fillna(0)
        df_anio['Recuperados_Nuevos'] = df_anio['Recuperados_Nuevos'].apply(lambda x: max(x, 0))


        recuperados_por_pais = df_anio.groupby('Country_Region').agg({'Recuperados_Nuevos': 'sum'}).reset_index()
        recuperados_por_pais_dict = recuperados_por_pais.set_index('Country_Region')['Recuperados_Nuevos'].to_dict()
        return recuperados_por_pais_dict
    else:
        print("No se cargaron datos.")
        return None

anio = 2021
recuperados_por_pais = procesar_recuperados_pais(anio)

if recuperados_por_pais is not None:
    print(f'Recuperados por país en el año {anio}:')
    for pais, recuperados in recuperados_por_pais.items():
        print(f'{pais}: {recuperados}')
else:
    print('No se han podido generar los datos de recuperados por país.')

#11. Top 10 de países con más casos confirmados, indicando la última fecha de actualización de los 3 años analizados.

def cargar_datos_confirmados(anio_inicio, anio_fin):
    dataframes = []
    fecha_inicio = datetime(anio_inicio, 1, 22)
    fecha_fin = datetime(anio_fin, 3, 9)

    while fecha_inicio <= fecha_fin:
        fecha_formateada = fecha_inicio.strftime("%m-%d-%Y")
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'

        try:
            df = pd.read_csv(url)
            if 'Country/Region' in df.columns:
                df = df.rename(columns={'Country/Region': 'Country_Region'})
            if {'Country_Region', 'Confirmed'}.issubset(df.columns):
                df = df[['Country_Region', 'Confirmed']]
                df['Fecha'] = pd.to_datetime(fecha_formateada, format='%m-%d-%Y')
                dataframes.append(df)

            else:
                print(f"Columnas faltantes para {fecha_formateada}: {df.columns}")

        except pd.errors.EmptyDataError:
            print(f'No hay datos disponibles para {fecha_formateada}')
        except Exception as e:
            print(f'Error al cargar los datos para {fecha_formateada}: {e}')

        fecha_inicio += timedelta(days=1)

    if dataframes:
        df_completo = pd.concat(dataframes, ignore_index=True)
        df_completo = df_completo.drop_duplicates()
        return df_completo
    else:
        return None

def top_paises_confirmados(df_completo):
    df_completo['Confirmed'] = pd.to_numeric(df_completo['Confirmed'], errors='coerce').fillna(0)
    summary = df_completo.groupby('Country_Region').agg({
        'Confirmed': 'sum',
        'Fecha': 'max'
    }).reset_index()
    maximos = summary['Confirmed'].max()
    print(f'El valor máximo de confirmados es: {maximos}')
    summary = summary.sort_values(by='Confirmed', ascending=False).head(10)
    summary['Confirmed'] = summary['Confirmed'].apply(lambda x: f'{x:,.0f}')
    return summary

anio_inicio = 2020
anio_fin = 2023
df_completo = cargar_datos_confirmados(anio_inicio, anio_fin)
if df_completo is not None:
    top_paises = top_paises_confirmados(df_completo)
    print('Top 10 países con más casos confirmados:')
    print(top_paises)
else:
    print('No se han podido cargar los datos.')

#12. Gráfico de líneas: Cree un gráfico que muestre la evolución de casos confirmados, fallecidos, recuperados y activos en países donde las muertes han superado los 50 casos en un año, por año.


def cargar_datos_por_anio(anio):
    dataframes = []
    fecha_inicio = datetime(anio, 1, 1)
    fecha_fin = datetime(anio, 12, 31)
    delta = timedelta(days=1)

    while fecha_inicio <= fecha_fin:
        fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url, usecols=['Country_Region', 'Confirmed', 'Deaths', 'Recovered', 'Active'])
            df['Date'] = fecha_inicio
            dataframes.append(df)
        except Exception as e:
            print(f'Error loading data for {fecha_formateada}: {e}')
        fecha_inicio += delta

    if dataframes:
        df_completo = pd.concat(dataframes, ignore_index=True)
        return df_completo
    else:
        return None

def filtrar_paises(df_completo):
    df_filtered = df_completo.groupby(['Country_Region', 'Date']).sum().reset_index()
    return df_filtered[df_filtered['Deaths'] > 50]

def graficar_evolucion(df_filtered):
    paises = df_filtered['Country_Region'].unique()
    for pais in paises:
        data_pais = df_filtered[df_filtered['Country_Region'] == pais]
        plt.figure(figsize=(10, 5))
        plt.plot(data_pais['Date'], data_pais['Confirmed'], label='Confirmed')
        plt.plot(data_pais['Date'], data_pais['Deaths'], label='Deaths')
        plt.plot(data_pais['Date'], data_pais['Recovered'], label='Recovered')
        plt.plot(data_pais['Date'], data_pais['Active'], label='Active')
        plt.title(f'COVID-19 Evolution in {pais}')
        plt.xlabel('Date')
        plt.ylabel('Cases')
        plt.legend()
        plt.grid(True)
        plt.show()

# Solicitar año al usuario
anio = int(input("Ingrese el año para cargar los datos: "))

df_anual = cargar_datos_por_anio(anio)
if df_anual is not None:
    df_filtrado = filtrar_paises(df_anual)
    graficar_evolucion(df_filtrado)
else:
    print(f'No data available for {anio}')

#13. Gráfico de barras (USA): Genere un gráfico que muestre los fallecidos confirmados en USA según provincia/estado en un rango de fechas específico en un intervalo de tiempo ingresado por pantalla.
def cargar_datos_rango(fecha_inicio,fecha_fin):
    dataframes=[]
    fechas = pd.date_range(fecha_inicio,fecha_fin)
    for fecha in fechas:
        fecha_formateada = fecha.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            columnas = {'Country_Region', 'Province_State', 'Deaths'}
            if columnas.issubset(df.columns):
                df = df[df['Country_Region']== 'US'][['Province_State', 'Deaths']]
                df['Fecha'] = pd.to_datetime(fecha_formateada, format='%m-%d-%Y')
                dataframes.append(df)
        except pd.errors.EmptyDataError:
            print(f'No Disponible para  {fecha_formateada}')
        except Exception as e:
            print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')

    if dataframes:
        df_completo = pd.concat(dataframes, ignore_index=True)
        return df_completo
    else:
        print('No se encontraron datos')
        return None

def graficar_fallecidos_estado(df, inicio, fin):
    agrupar = df.groupby('Province_State').agg({
        'Deaths':'sum'
        }).reset_index()
    agrupar = agrupar.sort_values(by='Deaths', ascending=False)
    plt.figure(figsize=(10,5))
    plt.bar(agrupar['Province_State'], agrupar['Deaths'])
    plt.title(f'Fallecidos confirmados en USA por provincia/estado desde {inicio} hasta {fin}')
    plt.xlabel('Provincia/Estado', fontsize=10)
    plt.xticks(rotation=90)
    plt.ticklabel_format(style='plain', axis='y') #deja de usar notacion cientifica para mayor claridad en los numeros
    plt.ylabel('Fallecidos',fontsize=10)
    plt.tight_layout()
    plt.show()

fecha_inicio = input("Ingrese la fecha de inicio (YYYY-MM-DD): ")
fecha_fin = input("Ingrese la fecha de fin (YYYY-MM-DD): ")

df_completo = cargar_datos_rango(fecha_inicio, fecha_fin)
if df_completo is not None and not df_completo.empty:
    graficar_fallecidos_estado(df_completo, fecha_inicio, fecha_fin)
else:
    print('No se han podido cargar los datos.')

#14. Comparativa de provincias/estados en USA: Gráfico que compare los casos confirmados, fallecidos, recuperados y activos por provincia/estado en USA en un intervalo de tiempo ingresado por pantalla.
import matplotlib.pyplot as plt
from matplotlib.ticker import ScalarFormatter
def cargar_datos_intevalo(fecha_inicio, fecha_fin):
    dataframes = []
    fechas = pd.date_range(fecha_inicio, fecha_fin)
    for fecha in fechas:
        fecha_formateada = fecha.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            columnas = {'Country_Region', 'Province_State', 'Confirmed', 'Deaths', 'Recovered', 'Active'}
            if columnas.issubset(df.columns):
                df = df[df['Country_Region'] == 'US'][['Province_State', 'Confirmed', 'Deaths', 'Recovered', 'Active']]
                df['Fecha'] = pd.to_datetime(fecha_formateada, format='%m-%d-%Y')
                dataframes.append(df)
        except pd.errors.EmptyDataError:
            print(f'No hay datos disponibles para {fecha_formateada}')
        except Exception as e:
            print(f'Error al cargar datos para {fecha_formateada}: {e}')

    if dataframes:
        df_completo = pd.concat(dataframes, ignore_index=True)
        df_completo.fillna(0, inplace=True)
        return df_completo
    else:
        print('No se encontraron datos')
        return None
def comparativa_grafica(df, fecha_inicio, fecha_fin):
    df['Recovered'] = df['Recovered'].fillna(0)
    df['Active'] = df['Active'].fillna(0)


    df_agrupado = df.groupby('Province_State').agg({
        'Confirmed': 'sum',
        'Deaths': 'sum',
        'Recovered': 'sum',
        'Active': 'sum'
    }).reset_index()


    df_agrupado = df_agrupado.sort_values(by='Confirmed', ascending=False)


    plt.figure(figsize=(15, 8))
    x = range(len(df_agrupado))
    bar_width = 0.2


    plt.bar([i - 1.5 * bar_width for i in x], df_agrupado['Confirmed'], width=bar_width, label='Confirmed', color='blue')
    plt.bar([i - 0.5 * bar_width for i in x], df_agrupado['Deaths'], width=bar_width, label='Deaths', color='red')
    plt.bar([i + 0.5 * bar_width for i in x], df_agrupado['Recovered'], width=bar_width, label='Recovered', color='green')
    plt.bar([i + 1.5 * bar_width for i in x], df_agrupado['Active'], width=bar_width, label='Active', color='orange')
    plt.yscale('log')

    plt.title(f'Comparativa de provincias/estados en USA desde {fecha_inicio} hasta {fecha_fin}')
    plt.xlabel('Provincia/Estado', fontsize=10)
    plt.ylabel('Casos', fontsize=10)
    plt.xticks(x, df_agrupado['Province_State'], rotation=90)
    #plt.ticklabel_format(style='plain', axis='y')
    ax = plt.gca()
    ax.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))
    plt.ticklabel_format(style='plain', axis='y')
    plt.legend()
    plt.tight_layout()
    plt.show()

fecha_inicio = input("Ingrese la fecha de inicio (YYYY-MM-DD): ")
fecha_fin = input("Ingrese la fecha de fin (YYYY-MM-DD): ")

df_completo = cargar_datos_intevalo(fecha_inicio, fecha_fin)
if df_completo is not None and not df_completo.empty:
    comparativa_grafica(df_completo, fecha_inicio, fecha_fin)
else:
    print('No se han podido cargar los datos.')

#15. Casos globales a lo largo del tiempo: Cree un gráfico que muestre los casos confirmados globalmente mes a mes en el año 2021

def cargar_datos_globales_2021(anio):
    dataframes = []
    fecha_inicio = datetime(anio, 1, 1)
    fecha_fin = datetime(anio, 12, 31)
    delta = timedelta(days=1)
    while fecha_inicio <= fecha_fin:
        fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            columnas = {'Country_Region', 'Confirmed'}
            if columnas.issubset(df.columns):
                df = df[df['Country_Region'] == 'US'][['Confirmed']]
                df.loc[:, 'Fecha'] = pd.to_datetime(fecha_formateada, format='%m-%d-%Y')
                dataframes.append(df)
        except pd.errors.EmptyDataError:
            print(f'No hay datos disponibles para {fecha_formateada}')
        except Exception as e:
            print(f'Error al cargar datos para {fecha_formateada}: {e}')
        fecha_inicio += delta
    if dataframes:
        df_completo = pd.concat(dataframes, ignore_index=True)
        return df_completo
    else:
        print('No se encontraron datos')
        return None
def graficar_casos_mes(df):
    print('Revisando valores nulos: ')
    print(df.isnull().sum())
    print('Columnas del DataFrame: ')
    print(df.columns)
    df['Mes'] = df['Fecha'].dt.month
    df['Año'] = df['Fecha'].dt.year
    df_agrupado = df.groupby('Mes').agg({
        'Confirmed': 'max'
    }).reset_index()
    print('Columnas después de la agrupación: ')
    print(df_agrupado.columns)
    df_agrupado['Confirmados_Nuevos'] = df_agrupado['Confirmed'].diff().fillna(df_agrupado['Confirmed'])
    print('Total de casos confirmados por mes (nuevos casos): ')
    print(df_agrupado[['Mes', 'Confirmados_Nuevos']].to_string(index=False))
    meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
    plt.figure(figsize=(10, 5))
    plt.plot(df_agrupado['Mes'], df_agrupado['Confirmados_Nuevos'], marker='o', linestyle='-', color='b', linewidth=2)
    plt.title('Casos confirmados globalmente mes a mes en el año 2021')
    plt.xlabel('Mes', fontsize=10)
    plt.ylabel('Casos confirmados', fontsize=10)
    plt.xticks(df_agrupado['Mes'], meses, rotation=45)
    plt.ticklabel_format(style='plain', axis='y')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    return df_agrupado
df_completo = cargar_datos_globales_2021(2021)
if df_completo is not None and not df_completo.empty:
    graficar_casos_mes(df_completo)
else:
    print('No se han podido cargar los datos')

#16. Total de casos confirmados a nivel mundial (de todo el tiempo).

def casos_confirmados_mundial():
    fecha = datetime(2023, 3, 9)
    total_confirmados = 0
    while fecha >= datetime(2020, 1, 22):
        fecha_formateada = fecha.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            if 'Confirmed' in df.columns:
                total_confirmados += df['Confirmed'].fillna(0).sum()
                print(f'Datos encontrados para {fecha_formateada}.')

        except Exception as e:
            print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')

        # Retrocede un día
        fecha -= timedelta(days=1)

    print("Total de casos confirmados desde enero 2020 hasta 2023.")
    return  total_confirmados

total_confirmados = casos_confirmados_mundial()

if total_confirmados is not None:
    print(f'Total de casos confirmados en el mundo: {total_confirmados}')
else:
    print("No se pudo obtener el total de casos confirmados.")

#17. Total de fallecidos a nivel mundial (de todo el tiempo).

def casos_fallecidos_mundial():
    fecha = datetime(2023, 3, 9)
    total_fallecidos = 0
    while fecha >= datetime(2020, 1, 22):
        fecha_formateada = fecha.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            if 'Deaths' in df.columns:
                total_fallecidos += df['Deaths'].fillna(0).sum()
                print(f'Datos encontrados para {fecha_formateada}.')

        except Exception as e:
            print(f'Error al procesar el archivo CSV para {fecha_formateada}: {e}')

        # Retrocede un día
        fecha -= timedelta(days=1)

    print("Total de casos fallecidos desde enero 2020 hasta 2023.")
    return  total_fallecidos

total_fallecidos = casos_fallecidos_mundial()

if total_fallecidos is not None:
    print(f'Total de casos fallecidos en el mundo: {total_fallecidos}')
else:
    print("No se pudo obtener el total de casos fallecidos.")

#18. Rebrotes: Liste las regiones o países que experimentaron rebrotes (días sin casos y posterior aparición de nuevos casos) por cada mes en un año a elección.
def rebrotes_por_mes(anio):
    dataframes = []
    fecha_inicio = datetime(anio, 1, 1)
    fecha_fin = datetime(anio + 1, 1, 1)
    delta = timedelta(days=1)
    while fecha_inicio < fecha_fin:
        fecha_formateada = fecha_inicio.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            if 'Country/Region' in df.columns:
                df = df.rename(columns={'Country/Region': 'Country_Region'})
            if {'Country_Region', 'Confirmed'}.issubset(df.columns):
                df = df[['Country_Region', 'Confirmed']].copy()
                df.loc[:, 'Fecha'] = fecha_inicio
                dataframes.append(df)
        except Exception as e:
            print(f'Error al cargar los datos para {fecha_formateada}: {e}')
        fecha_inicio += delta
    if dataframes:
        df_completo = pd.concat(dataframes, ignore_index=True)
        df_completo['Confirmed'] = pd.to_numeric(df_completo['Confirmed'], errors='coerce').fillna(0)
        df_completo['Fecha'] = pd.to_datetime(df_completo['Fecha'])
        return df_completo
    else:
        return None

def detectar_rebrotes(df, anio):

    resultados = []

    if df is None or 'Country_Region' not in df.columns or 'Confirmed' not in df.columns:
        print("Datos insuficientes para analizar rebrotes.")
        return None
    df.loc[:, 'Fecha'] = pd.to_datetime(df['Fecha'], errors='coerce')
    for region, datos in df.groupby('Country_Region'):
        datos = datos.sort_values('Fecha')

        for mes in range(1, 13):
            datos_mes = datos[(datos['Fecha'].dt.year == anio) & (datos['Fecha'].dt.month == mes)]
            if datos_mes.empty:
                continue

            hubo_dia_sin_casos = False
            rebrote_detectado = False

            for _, fila in datos_mes.iterrows():
                casos_actuales = fila['Confirmed']
                if casos_actuales == 0:
                    hubo_dia_sin_casos = True
                elif hubo_dia_sin_casos and casos_actuales > 0:
                    rebrote_detectado = True
                    break

            if rebrote_detectado:
                resultados.append({'Region': region, 'Mes': mes, 'Año': anio})

    if resultados:
        return pd.DataFrame(resultados)
    else:
        return None


anio = int(input("Introduce el año para analizar rebrotes: "))
pd.set_option('display.max_rows', None)

df_completo = rebrotes_por_mes(anio)
if df_completo is not None:
    rebrotes = detectar_rebrotes(df_completo, anio)
    if rebrotes is not None:
        print("Rebrotes detectados:")
        print(rebrotes.to_string(index=False))
    else:
        print("No se detectaron rebrotes.")
else:
    print("No se pudieron cargar los datos.")

#19. Salidas adicionales: Genere al menos 5 salidas adicionales que resuman la evolución del COVID-19 a lo largo de al menos 2 años, cruzando 5 o más variables además de la fecha. Las salidas deben responder a análisis
#relevantes
import matplotlib.pyplot as plt
from matplotlib.ticker import ScalarFormatter

def cargar_datos_intevalo(fecha_inicio, fecha_fin):
    dataframes = []
    fechas = pd.date_range(fecha_inicio, fecha_fin)
    for fecha in fechas:
        fecha_formateada = fecha.strftime('%m-%d-%Y')
        url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{fecha_formateada}.csv'
        try:
            df = pd.read_csv(url)
            if 'Country/Region' in df.columns:
                df.rename(columns={'Country/Region': 'Country_Region'}, inplace=True)
            columnas = {'Country_Region', 'Province_State', 'Confirmed', 'Deaths', 'Recovered', 'Active'}
            if columnas.issubset(df.columns):
                df = df[['Country_Region', 'Province_State', 'Confirmed', 'Deaths', 'Recovered', 'Active']].copy()
                df.loc[:, 'Fecha'] = pd.to_datetime(fecha_formateada, format='%m-%d-%Y')
                dataframes.append(df)
        except pd.errors.EmptyDataError:
            print(f'No hay datos disponibles para {fecha_formateada}')
        except Exception as e:
            print(f'Error al cargar datos para {fecha_formateada}: {e}')

    if dataframes:
        df_completo = pd.concat(dataframes, ignore_index=True)
        df_completo.fillna(0, inplace=True)
        return df_completo
    else:
        print('No se encontraron datos')
        return None


def evolucion_covid(df, pais):
    df_estado = df[df['Country_Region'] == pais]
    df_agrupar = df_estado.groupby('Fecha').agg({
        'Confirmed': 'sum',
        'Deaths': 'sum',
        'Recovered': 'sum',
        'Active': 'sum'
    }).reset_index()
    #graficando
    plt.figure(figsize=(10, 6))
    plt.plot(df_agrupar['Fecha'], df_agrupar['Confirmed'], label='Confirmados', color='blue')
    plt.plot(df_agrupar['Fecha'], df_agrupar['Deaths'], label='Fallecidos', color='red')
    plt.plot(df_agrupar['Fecha'], df_agrupar['Recovered'], label='Recuperados', color='green')
    plt.plot(df_agrupar['Fecha'], df_agrupar['Active'], label='Activos', color='orange')
    plt.title(f'Evolucion del covid en {pais}')
    plt.xlabel('Fecha')
    plt.ylabel('Casos')
    ax = plt.gca()
    ax.yaxis.set_major_formatter(ScalarFormatter())
    ax.ticklabel_format(style='plain', axis='y')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def tasa_mortalidad(df, pais):
    df_pais = df[df['Country_Region'] == pais]
    df_agrupar = df_pais.groupby('Fecha').agg({
        'Confirmed': 'sum',
        'Deaths': 'sum'
    }).reset_index()
    df_agrupar['Tasa_Mortalidad'] = (df_agrupar['Deaths'] / df_agrupar['Confirmed']) * 100
    plt.figure(figsize=(10, 6))
    plt.plot(df_agrupar['Fecha'], df_agrupar['Tasa_Mortalidad'], color='red')
    plt.title(f'Tasa de Mortalidad en {pais}')
    plt.xlabel('Fecha')
    plt.ylabel('Tasa de Mortalidad (%)')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def tasa_recuperacion(df, pais):
    df_pais = df[df['Country_Region'] == pais]
    df_agrupar = df_pais.groupby('Fecha').agg({
        'Confirmed': 'sum',
        'Recovered': 'sum'
    }).reset_index()
    df_agrupar['Tasa_Recuperacion'] = (df_agrupar['Recovered'] / df_agrupar['Confirmed']) * 100
    plt.figure(figsize=(10, 6))
    plt.plot(df_agrupar['Fecha'], df_agrupar['Tasa_Recuperacion'], color='green')
    plt.title(f'Tasa de Recuperacion en {pais}')
    plt.xlabel('Fecha')
    plt.ylabel('Tasa de Recuperacion (%)')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def impacto_muertes(df, pais):
    df_pais = df[df['Country_Region'] == pais]
    df_agrupar = df_pais.groupby('Fecha').agg({
        'Confirmed': 'sum',
        'Deaths': 'sum'
    }).reset_index()
    df_agrupar['Impacto_Muertes'] = df_agrupar['Deaths'] / df_agrupar['Confirmed']
    plt.figure(figsize=(10, 6))
    plt.plot(df_agrupar['Fecha'], df_agrupar['Impacto_Muertes'], color='orange')
    plt.title(f'Impacto de las Muertes en {pais}')
    plt.xlabel('Fecha')
    plt.ylabel('Impacto de las Muertes')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


def comparar_activos_recuperados(df, pais):
    df_pais = df[df['Country_Region'] == pais]
    df_agrupar = df_pais.groupby('Fecha').agg({
        'Active': 'sum',
        'Recovered': 'sum'
    }).reset_index()
    plt.figure(figsize=(10, 6))

    plt.plot(df_agrupar['Fecha'], df_agrupar['Active'], label='Activos', color='orange')
    plt.plot(df_agrupar['Fecha'], df_agrupar['Recovered'], label='Recuperados', color='green')
    plt.title(f'Comparacion de Activos y Recuperados en {pais}')
    plt.xlabel('Fecha')
    plt.ylabel('Casos')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


fecha_inicio = input("Ingrese la fecha de inicio (YYYY-MM-DD): ")
fecha_fin = input("Ingrese la fecha de fin (YYYY-MM-DD): ")
df_completo = cargar_datos_intevalo(fecha_inicio, fecha_fin)
if df_completo is not None and not df_completo.empty:
    pais = input("Ingrese el nombre del pais o estado que desea analizar: ")
    evolucion_covid(df_completo, pais)
    tasa_mortalidad(df_completo, pais)
    tasa_recuperacion(df_completo, pais)
    impacto_muertes(df_completo, pais)
    comparar_activos_recuperados(df_completo, pais)
else:
    print('No se han podido cargar los datos.')

#20. Reporte final: Utilizando Python, cree un PDF en estilo "dashboard" que resuma los puntos mencionados anteriormente, proporcionando indicadores clave para la toma de decisiones directivas sobre la base de los
#datos analizados


from fpdf import FPDF
import matplotlib.pyplot as plt

def crear_grafico(df, pais, tipo_grafico, pdf):
    df_pais = df[df['Country_Region'] == pais]
    df_agrupar = df_pais.groupby('Fecha').agg({
        'Confirmed': 'sum',
        'Deaths': 'sum',
        'Recovered': 'sum',
        'Active': 'sum'
    }).reset_index()

    # Crear los gráficos y guardarlos
    if tipo_grafico == "evolucion_covid":
        plt.figure(figsize=(10, 6))
        plt.plot(df_agrupar['Fecha'], df_agrupar['Confirmed'], label='Confirmados', color='blue')
        plt.plot(df_agrupar['Fecha'], df_agrupar['Deaths'], label='Fallecidos', color='red')
        plt.plot(df_agrupar['Fecha'], df_agrupar['Recovered'], label='Recuperados', color='green')
        plt.plot(df_agrupar['Fecha'], df_agrupar['Active'], label='Activos', color='orange')
        plt.title(f'Evolución del COVID en {pais}')
        plt.xlabel('Fecha')
        plt.ylabel('Casos')
        plt.legend()
        plt.grid(True)
        plt.xticks(rotation=45)
        image_path = f'/content/{pais}_evolucion_covid.png'
        plt.savefig(image_path, bbox_inches='tight')
        plt.close()

    elif tipo_grafico == "tasa_mortalidad":
        df_agrupar['Tasa_Mortalidad'] = (df_agrupar['Deaths'] / df_agrupar['Confirmed']) * 100
        plt.figure(figsize=(10, 6))
        plt.plot(df_agrupar['Fecha'], df_agrupar['Tasa_Mortalidad'], color='red')
        plt.title(f'Tasa de Mortalidad en {pais}')
        plt.xlabel('Fecha')
        plt.ylabel('Tasa de Mortalidad (%)')
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        image_path = f'/content/{pais}_tasa_mortalidad.png'
        plt.savefig(image_path, bbox_inches='tight')
        plt.close()

    elif tipo_grafico == "tasa_recuperacion":
        df_agrupar['Tasa_Recuperacion'] = (df_agrupar['Recovered'] / df_agrupar['Confirmed']) * 100
        plt.figure(figsize=(10, 6))
        plt.plot(df_agrupar['Fecha'], df_agrupar['Tasa_Recuperacion'], color='green')
        plt.title(f'Tasa de Recuperación en {pais}')
        plt.xlabel('Fecha')
        plt.ylabel('Tasa de Recuperación (%)')
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        image_path = f'/content/{pais}_tasa_recuperacion.png'
        plt.savefig(image_path, bbox_inches='tight')
        plt.close()

    elif tipo_grafico == "impacto_muertes":
        df_agrupar['Impacto_Muertes'] = df_agrupar['Deaths'] / df_agrupar['Confirmed']
        plt.figure(figsize=(10, 6))
        plt.plot(df_agrupar['Fecha'], df_agrupar['Impacto_Muertes'], color='orange')
        plt.title(f'Impacto de las Muertes en {pais}')
        plt.xlabel('Fecha')
        plt.ylabel('Impacto de las Muertes')
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        image_path = f'/content/{pais}_impacto_muertes.png'
        plt.savefig(image_path, bbox_inches='tight')
        plt.close()

    elif tipo_grafico == "comparar_activos_recuperados":
        plt.figure(figsize=(10, 6))
        plt.plot(df_agrupar['Fecha'], df_agrupar['Active'], label='Activos', color='orange')
        plt.plot(df_agrupar['Fecha'], df_agrupar['Recovered'], label='Recuperados', color='green')
        plt.title(f'Comparación de Activos y Recuperados en {pais}')
        plt.xlabel('Fecha')
        plt.ylabel('Casos')
        plt.legend()
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        image_path = f'/content/{pais}_activos_recuperados.png'
        plt.savefig(image_path, bbox_inches='tight')
        plt.close()

    try:
        # Intentar agregar la imagen al PDF
        pdf.add_page()
        pdf.image(image_path, x=10, y=pdf.get_y(), w=180)
        pdf.ln(90)  # Ajustar el espaciado entre los gráficos o textos
    except Exception as e:
        # Si ocurre un error al insertar la imagen, se muestra el mensaje de error
        print(f"Error al insertar la imagen: {image_path}. Error: {e}")

def crear_pdf(df, pais, fecha_inicio, fecha_fin):
    pdf = FPDF()
    pdf.add_page()

    # Título del reporte
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(200, 10, txt="Dashboard de Evolución COVID-19", ln=True, align='C')
    pdf.set_font('Arial', '', 12)
    pdf.ln(10)
    pdf.cell(200, 10, txt=f"Análisis de la evolución del COVID-19 en {pais} desde {fecha_inicio} hasta {fecha_fin}", ln=True)


    pdf.ln(10)
    pdf.set_font('Arial', 'I', 12)
    pdf.multi_cell(0, 10, txt="Los resultados obtenidos se lograron en el ítem 19, el cual incluye un análisis exhaustivo de los casos confirmados, muertes, recuperaciones y activos en un pais especifico como US, además de la tasa de mortalidad y la tasa de recuperación a lo largo del tiempo.")


    pdf.ln(10)
    pdf.set_font('Arial', '', 12)
    pdf.multi_cell(0, 10, txt="Los gráficos a continuación muestran la evolución del COVID-19 en términos de casos confirmados, fallecidos, recuperados y activos en US. Además, se presentan análisis clave como la tasa de mortalidad, tasa de recuperación y el impacto de las muertes sobre los casos confirmados.")


    crear_grafico(df, pais, "evolucion_covid", pdf)
    crear_grafico(df, pais, "tasa_mortalidad", pdf)
    crear_grafico(df, pais, "tasa_recuperacion", pdf)
    crear_grafico(df, pais, "impacto_muertes", pdf)
    crear_grafico(df, pais, "comparar_activos_recuperados", pdf)

    # Guardar el PDF
    pdf.output(f'/content/dashboard_{pais}.pdf')

# Usar las fechas de inicio y fin adecuadas
fecha_inicio = '2020-01-22'
fecha_fin = '2023-03-09'
df_completo = cargar_datos_intevalo(fecha_inicio, fecha_fin)
pais = 'US'
crear_pdf(df_completo, pais, fecha_inicio, fecha_fin)

print(f"El reporte PDF para {pais} se ha generado correctamente.")

from google.colab import files

files.download(f'/content/dashboard_{pais}.pdf')

!pip install fpdf

